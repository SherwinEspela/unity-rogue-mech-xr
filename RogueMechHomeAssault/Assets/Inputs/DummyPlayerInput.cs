//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/DummyPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DummyPlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DummyPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DummyPlayerInput"",
    ""maps"": [
        {
            ""name"": ""DummyPlayer"",
            ""id"": ""c1c867d6-4455-4240-8909-10d4b4c8c15f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4196f988-37cb-4224-96f1-c26cf1b40d5c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b1a57a98-8df6-4878-86ce-669b6ba6743c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""13287002-b135-4ccd-8b73-fa559adb41a2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""56d0e254-e0eb-450e-a48b-f9dd9aa308b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""da1dbe15-6ab9-4342-8889-afdfe64ca9a9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e7dddd55-b078-4989-b88f-13610cb6c00a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DummyPlayer
        m_DummyPlayer = asset.FindActionMap("DummyPlayer", throwIfNotFound: true);
        m_DummyPlayer_Move = m_DummyPlayer.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DummyPlayer
    private readonly InputActionMap m_DummyPlayer;
    private List<IDummyPlayerActions> m_DummyPlayerActionsCallbackInterfaces = new List<IDummyPlayerActions>();
    private readonly InputAction m_DummyPlayer_Move;
    public struct DummyPlayerActions
    {
        private @DummyPlayerInput m_Wrapper;
        public DummyPlayerActions(@DummyPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_DummyPlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_DummyPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DummyPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IDummyPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_DummyPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DummyPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IDummyPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IDummyPlayerActions instance)
        {
            if (m_Wrapper.m_DummyPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDummyPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_DummyPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DummyPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DummyPlayerActions @DummyPlayer => new DummyPlayerActions(this);
    public interface IDummyPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
